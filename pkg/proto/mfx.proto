// Copyright (c) Mainflux
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package protomfx;

import "google/protobuf/empty.proto";

message Message {
    string          publisher      = 1;
    string          subtopic       = 2;
    bytes           payload        = 3;
    string          contentType    = 4;
    string          protocol       = 5;
    int64           created        = 6; // Unix timestamp in nanoseconds
    string          subject        = 7;
}

service ThingsService {
    rpc GetPubConfByKey(ThingKey) returns (PubConfByKeyRes) {}
    rpc GetConfigByThingID(ThingID) returns (ConfigByThingIDRes){}
    rpc CanUserAccessThing(UserAccessReq) returns (google.protobuf.Empty) {}
    rpc CanUserAccessProfile(UserAccessReq) returns (google.protobuf.Empty) {}
    rpc CanUserAccessGroup(UserAccessReq) returns (google.protobuf.Empty) {}
    rpc CanThingAccessGroup(ThingAccessReq) returns (google.protobuf.Empty) {}
    rpc Identify(ThingKey) returns (ThingID) {}
    rpc GetGroupIDByThingID(ThingID) returns (GroupID) {}
    rpc GetGroupIDByProfileID(ProfileID) returns (GroupID) {}
    rpc GetProfileIDByThingID(ThingID) returns (ProfileID) {}
    rpc GetGroupIDsByOrg(OrgAccessReq) returns (GroupIDs) {}
}

service UsersService {
    rpc GetUsersByIDs(UsersByIDsReq) returns (UsersRes) {}
    rpc GetUsersByEmails(UsersByEmailsReq) returns (UsersRes) {}
}

service AuthService {
    rpc Issue(IssueReq) returns (Token) {}
    rpc Identify(Token) returns (UserIdentity) {}
    rpc Authorize(AuthorizeReq) returns (google.protobuf.Empty) {}
    rpc GetOwnerIDByOrgID(OrgID) returns (OwnerID) {}
    rpc AssignRole(AssignRoleReq) returns (google.protobuf.Empty) {}
    rpc RetrieveRole(RetrieveRoleReq) returns (RetrieveRoleRes) {}
}

service RulesService {
    rpc Publish(PublishReq) returns (google.protobuf.Empty) {}
}

message PublishReq {
    Message message = 1;
}

message ThingKey {
    string key = 1;
    string keyType = 2;
}

message PubConfByKeyRes {
    string  publisherID   = 1;
    Config  profileConfig = 2;
}

message Config {
    string          contentType = 1;
    Transformer     transformer = 2;
}

message ConfigByThingIDRes{
    Config config = 1;
}

message Transformer {
    repeated string dataFilters = 1;
    string dataField            = 2;
    string timeField            = 3;
    string timeFormat           = 4;
    string timeLocation         = 5;
}

message ThingID {
    string value = 1;
}

message ProfileID {
    string value = 1;
}

message GroupID {
    string value = 1;
}

message GroupIDs {
    repeated string ids = 1;
}

message OrgID {
    string value = 1;
}

message OwnerID {
    string value = 1;
}

// If a token is not carrying any information itself, the type
// field can be used to determine how to validate the token.
// Also, different tokens can be encoded in different ways.
message Token {
    string value = 1;
}

message UserIdentity {
    string id    = 1;
    string email = 2;
}

message IssueReq {
    string id    = 1;
    string email = 2;
    uint32 type  = 3;
}

message AuthorizeReq {
    string token   = 1;
    string object  = 2;
    string subject = 3;
    string action  = 4;
}

message UserAccessReq {
    string token  = 1;
    string id     = 2;
    string action = 3;
}

message ThingAccessReq {
    string key = 1;
    string id  = 2;
}

message User {
    string id     = 1;
    string email  = 2;
    string status = 3;
}

message PageMetadata {
    uint64 total  = 1;
    uint64 offset = 2;
    uint64 limit  = 3;
    string email  = 4;
    string order  = 5;
    string dir    = 6;
}

message UsersByEmailsReq {
    repeated string emails = 1;
}

message UsersByIDsReq {
    repeated string ids       = 1;
    PageMetadata pageMetadata = 2;
}

message UsersRes {
    repeated User users       = 1;
    PageMetadata pageMetadata = 2;
}

message AssignRoleReq {
    string id   = 1;
    string role = 2;
}

message RetrieveRoleReq {
    string id = 1;
}

message RetrieveRoleRes {
    string role = 1;
}

message OrgAccessReq {
    string org_id = 1;
    string token  = 2;
}
