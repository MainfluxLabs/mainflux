openapi: 3.0.1
info:
  title: Mainflux rules service
  description: HTTP API for managing platform rules.
  version: 1.0.0

paths:
  /profiles/{profileId}/rules:
    post:
      summary: Adds new rules
      description: Adds new rules to the list of rules for certain profile identified by the provided ID
      tags:
        - rules
      parameters:
        - $ref: "#/components/parameters/ProfileId"
      requestBody:
        $ref: "#/components/requestBodies/CreateRulesReq"
      responses:
        '201':
          $ref: "#/components/responses/CreateRulesRes"
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: Failed to perform authorization over the entity.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    get:
      summary: Retrieves rules by profile
      description: Retrieves list of rules related to a certain profile identified by the provided ID.
      tags:
        - rules
      parameters:
        - $ref: "#/components/parameters/ProfileId"
      responses:
        '200':
          $ref: "#/components/responses/ListRulesRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: Failed to perform authorization over the entity.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
  /groups/{groupId}/rules:
    get:
      summary: Retrieves rules by group
      description: Retrieves list of rules related to a certain group identified by the provided ID.
      tags:
        - rules
      parameters:
        - $ref: "#/components/parameters/GroupId"
      responses:
        '200':
          $ref: "#/components/responses/ListRulesRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: Failed to perform authorization over the entity.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
  /rules/{ruleId}:
    get:
      summary: Retrieves rule info
      tags:
        - rules
      parameters:
        - $ref: "#/components/parameters/RuleId"
      responses:
        '200':
          $ref: "#/components/responses/RuleRes"
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Rule does not exist.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
    put:
      summary: Updates rule info
      description: Update is performed by replacing the current resource data with values provided in a request payload.
      tags:
        - rules
      parameters:
        - $ref: "#/components/parameters/RuleId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateRuleReq"
      responses:
        '200':
          description: Rule updated.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Rule does not exist.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
  /rules:
    patch:
      summary: Removes rules
      description: Removes rules with provided identifiers.
      tags:
        - rules
      requestBody:
        $ref: "#/components/requestBodies/RemoveRulesReq"
      responses:
        '204':
          description: Rules removed.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"

components:
  schemas:
    Condition:
      type: object
      properties:
        field:
          type: string
          example: "temperature"
        comparator:
          type: string
          example: ">="
        threshold:
          type: number
          example: 45
      required: [field, comparator, threshold]
    Action:
      type: object
      properties:
        id:
          type: string
          description: Required for smtp and smpp actions.
          example: "513e2557-e09b-42d3-s456-425614175403"
        type:
          type: string
          enum: [ smtp, smpp, alarm ]
          example: "smtp"
      required:
        - type
    RuleReqSchema:
      type: object
      properties:
        profile_id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Temperature and Humidity Alert"
        description:
          type: string
          example: "Triggers when temperature exceeds 45째C and humidity drops below 20%"
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
        operator:
          type: string
          enum: [AND, OR]
          example: "AND"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
      required: [name, conditions, actions]
    RuleResSchema:
      type: object
      properties:
        id:
          type: string
          example: "789e4567-e89b-12d3-a456-426614174abc"
        profile_id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        group_id:
          type: string
          example: "321e4567-e89b-12d3-a456-426614174def"
        name:
          type: string
          example: "Temperature and Humidity Alert"
        description:
          type: string
          example: "Triggers when temperature exceeds 45째C and humidity drops below 20%"
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
        operator:
          type: string
          example: "AND"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
      required: [ id, profile_id, group_id, name, conditions, actions ]

  parameters:
    RuleId:
      name: ruleId
      description: Unique rule identifier.
      in: path
      schema:
        type: string
        format: uuid
      example: "789e4567-e89b-12d3-a456-426614174abc"
      required: true
    GroupId:
      name: groupId
      description: Group identifier for which the rules are being created/retrieved.
      in: path
      schema:
        type: string
        format: uuid
      example: "321e4567-e89b-12d3-a456-426614174def"
      required: true
    ProfileId:
      name: profileId
      description: Profile identifier for which the rules are being created/retrieved.
      in: path
      schema:
        type: string
        format: uuid
      example: "123e4567-e89b-12d3-a456-426614174000"
      required: true

  requestBodies:
    CreateRulesReq:
      description: JSON-formatted document describing the new rules.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              rules:
                type: array
                items:
                  $ref: "#/components/schemas/RuleReqSchema"
            required:
              - rules
          example:
            rules:
                name: "Temperature and Humidity Alert"
                description: "Triggers when temperature exceeds 45째C and humidity drops below 20%"
                conditions:
                  - field: "temperature"
                    comparator: ">"
                    threshold: 45
                  - field: "humidity"
                    comparator: "<"
                    threshold: 20
                operator: "AND"
                actions:
                  - type: "smtp"
                    id: "513e2557-e09b-42d3-s456-425614175403"
                  - type: "alarm"
    UpdateRuleReq:
      description: JSON-formatted document describing the updated rule.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RuleReqSchema"
          example:
            profile_id: "123e4567-e89b-12d3-a456-426614174000"
            name: "Temperature Alert"
            description: "Triggers when temperature exceeds 50째C"
            conditions:
              - field: "temperature"
                comparator: ">"
                threshold: 50
            actions:
              - type: "alarm"
    RemoveRulesReq:
      description: JSON-formatted document describing the identifiers of rules for deleting.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              rule_ids:
                type: array
                items:
                  type: string
                  format: uuid
            required:
              - rule_ids
          example:
            rule_ids:
              - "789e4567-e89b-12d3-a456-426614174abc"
              - "654e4567-e89b-12d3-a456-426614174999"

  responses:
    CreateRulesRes:
      description: Rules created.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RuleResSchema"
          example:
            - id: "84d1be5e-3511-4d15-aafa-b1bb4c20bca4"
              profile_id: "123e4567-e89b-12d3-a456-426614174000"
              group_id: "fc1e40aa-c5af-4a1d-b1e4-37f2e4bb50d1"
              name: "Temperature and Humidity Alert"
              description: "Triggers when temperature exceeds 45째C and humidity drops below 20%"
              conditions:
                - field: "temperature"
                  comparator: ">"
                  threshold: 45
                - field: "humidity"
                  comparator: "<"
                  threshold: 20
              operator: "AND"
              actions:
                - type: "smtp"
                  id: "513e2557-e09b-42d3-s456-425614175403"
                - type: "alarm"
    RuleRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RuleResSchema"
          example:
            id: "789e4567-e89b-12d3-a456-426614174abc"
            profile_id: "123e4567-e89b-12d3-a456-426614174000"
            group_id: "321e4567-e89b-12d3-a456-426614174def"
            name: "Temperature Alert"
            description: "Triggers when temperature exceeds 45째C"
            conditions:
              - field: "temperature"
                comparator: ">"
                threshold: 45
            actions:
              - type: "smtp"
                id: "513e2557-e09b-42d3-s456-425614175403"
    ListRulesRes:
      description: Rules retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              rules:
                type: array
                items:
                  $ref: "#/components/schemas/RuleResSchema"
            required:
              - rules
          example:
            rules:
              - id: "789e4567-e89b-12d3-a456-426614174abc"
                profile_id: "123e4567-e89b-12d3-a456-426614174000"
                group_id: "321e4567-e89b-12d3-a456-426614174def"
                name: "Temperature Alert"
                description: "Triggers when temperature exceeds 45째C"
                conditions:
                  - field: "temperature"
                    comparator: ">"
                    threshold: 45
                actions:
                  - type: "smtp"
                    id: "513e2557-e09b-42d3-s456-425614175403"
    ServiceError:
      description: Unexpected server-side error occurred.
      content:
        application/json:
          schema:
            type: string
            format: byte

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        * Users access: "Authorization: Bearer <user_token>"

security:
  - bearerAuth: [ ]
