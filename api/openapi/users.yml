openapi: 3.0.1
info:
  title: Mainflux users service
  description: HTTP API for managing platform users.
  version: "1.0.0"

paths:
  /users:
    post:
      summary: Registers user account
      description: |
        Registers new user account given email and password. New account will
        be uniquely identified by its email address.
      tags:
        - users
      requestBody:
        $ref: "#/components/requestBodies/UserCreateReq"
      responses:
        '201':
          $ref: "#/components/responses/UserCreateRes"
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '409':
          description: Failed due to using an existing email address.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    get:
      summary: Retrieves users
      description: |
        Retrieves a list of users. Due to performance concerns, data
        is retrieved in subsets. The API things must ensure that the entire
        dataset is consumed either by making subsequent requests, or by
        increasing the subset size of the initial request.
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Metadata"
        - $ref: "#/components/parameters/Status"
      responses:
        '200':
          $ref: "#/components/responses/UsersPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: This endpoint is available only for administrators.
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
    put:
      summary: Updates info on currently logged in user.
      description: |
        Updates info on currently logged in user. Info is updated using
        authorization token and the new received info.
      tags:
        - users
      requestBody:
        $ref: "#/components/requestBodies/UserUpdateReq"
      responses:
        '200':
          description: User updated.
        '400':
          description: Failed due to malformed JSON.
        '404':
          description: Failed due to non existing user.
        '401':
          description: Missing or invalid access token provided.
        '500':
         $ref: "#/components/responses/ServiceError"
  /users/search:
    post:
      summary: Search and retrieve users.
      description: |
        Retrieves a list of users with optional email, status and metadata filtering, and supports pagination (offset, limit) and sorting (order, dir).
      tags:
        - users
      requestBody:
        $ref: "#/components/requestBodies/SearchUsersReq"
      responses:
        '200':
          $ref: "#/components/responses/UsersPageRes"
        '400':
          description: Failed due to malformed request body.
        '401':
          description: Missing or invalid access token provided.
        '422':
          description: Unprocessable Entity
        '500':
          $ref: "#/components/responses/ServiceError"
  /users/profile:
     get:
      summary: Gets info on currently logged in user.
      description: |
        Gets info on currently logged in user. Info is obtained using
        authorization token
      tags:
        - users
      responses:
        '200':
          $ref: "#/components/responses/UserRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /register:
    post:
      summary: Self register user account
      description: |
            Registers a new user account given an email and password. The new account will
            be uniquely identified by its email address. If e-mail verification is enabled in the service,
            e-mail verification using the /register/verify endpoint is needed before the process is complete.
            Otherwise, the new user account is immediately created.
      tags:
        - users
      requestBody:
          $ref: "#/components/requestBodies/SelfRegisterReq"
      responses:
          '200':
            description: Registration request successfull, e-mail verification necessary.
          '201':
            $ref: "#/components/responses/UserCreateRes"
          '400':
            description: Failed due to malformed JSON.
          '415':
            description: Missing or invalid content type.
          '500':
            $ref: "#/components/responses/ServiceError"
  /register/verify:
    post:
      summary: Verify e-mail address.
      description: |
          Verify e-mail address by submitting a unique e-mail verification token associated with a particular registration process.
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/VerificationToken"
      responses:
          '201':
            $ref: "#/components/responses/UserCreateRes"
          '400':
            description: Missing or invalid verification token.
          '415':
            description: Missing or invalid content type.
          '500':
            $ref: "#/components/responses/ServiceError"
  /register/invite/{inviteId}:
    post:
      summary: Register an account using a Platform Invite.  
      description: | 
        Register a user account using a Platform Invite as a reference. The platform invite must be valid and non-expired. The
        subbmitted e-mail address must not be registered and must match that of the platform invite.
      tags:
        - users
      parameters:
          - $ref: "#/components/parameters/InviteId"
      requestBody:
        $ref: "#/components/requestBodies/PlatformInviteRegisterReq"
      responses:
        '200':
          $ref: "#/components/responses/UserCreateRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /users/{userId}:
    get:
      summary: Retrieves user
      description: |
        Retrieves user by its unique identifier.
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        '200':
          $ref: "#/components/responses/UserRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /invites-platform:
    post:
      summary: Create new Platform Invite.
      description: |
        Create a new Platform Invite towards an unregistered user to createa a Mainflux user account.
      tags:
        - platform invites
      requestBody:
        $ref: "#/components/requestBodies/PlatformInviteReq"
      responses:
        '201':
          description: Invite created.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: Unauthorized.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    get:
      summary: List all platform invites.
      description: | 
        Retrieve a list of all platform invites.
      tags:
        - platform invites
      responses:
        '200':
          $ref: "#/components/responses/PlatformInvitesPageRes"
        '403':
          description: Unauthorized.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"

  /invites-platform/{inviteId}:
    get:
      summary: Retrieve a specific Platform Invite.
      description: |
        Retrieve detailed information about a specific platform invite denoted by its ID.
      tags:
        - platform invites
      parameters:
          - $ref: "#/components/parameters/InviteId"
      responses:
        '200':
          $ref: "#/components/responses/PlatformInviteRes"
        '404':
          description: Failed due to non existing Invite.
        '403':
          description: Unauthorized.
        '500':
          $ref: "#/components/responses/ServiceError"
    delete:
      summary: Revoke a specific Platform Invite.
      description: |
        Revoke a specific pending Invite denoted by its ID. 
      tags:
        - platform invites
      parameters:
        - $ref: "#/components/parameters/InviteId"
      responses:
        '204':
          description: Invite revoked.
        '403':
          description: Unauthorized.
        '404':
          description: Failed due to non existing Invite.
        '500':
          $ref: "#/components/responses/ServiceError"

  /tokens:
    post:
      summary: User authentication
      description: Generates an access token when provided with proper credentials.
      tags:
        - users
      requestBody:
        $ref: "#/components/requestBodies/UserCreateReq"
      responses:
        '201':
          description: User authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Failed due to malformed JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Failed due to using invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: Missing or invalid content type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServiceError'
  /password/reset-request:
    post:
      summary: User password reset request
      description: |
        Generates a reset token and sends and
        email with link for resetting password.
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/Referer"
      requestBody:
        $ref: '#/components/requestBodies/RequestPasswordReset'
      responses:
        '201':
          description: Users link for reseting password.
        '400':
          description: Failed due to malformed JSON.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: '#/components/responses/ServiceError'
  /password/reset:
    put:
      summary: User password reset endpoint
      description: |
        When user gets reset token, after he submited
        email to `/password/reset-request`, posting a
          new password along to this endpoint will change password.
      tags:
        - users
      requestBody:
        $ref: '#/components/requestBodies/PasswordReset'
      responses:
        '201':
          description: User link .
        '400':
          description: Failed due to malformed JSON.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: '#/components/responses/ServiceError'
  /password:
    patch:
      summary: User password change endpoint
      description: |
        When authenticated user wants to change password.
      tags:
        - users
      requestBody:
        $ref: '#/components/requestBodies/PasswordChange'
      responses:
        '201':
          description: User link .
        '400':
          description: Failed due to malformed JSON.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
  /users/{userId}/enable:
    post:
      summary: Enables a user account
      description: |
        Enables a disabled user account for a given user ID.
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        '200':
          description: User enabled.
        '400':
          description: Failed due to malformed JSON.
        '404':
          description: Failed due to non existing user.
        '401':
          description: Missing or invalid access token provided.
        '500':
         $ref: "#/components/responses/ServiceError"
  /users/{userId}/disable:
    post:
      summary: Disables a user account
      description: |
        Disables a user account for a given user ID.
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        '200':
          description: User disabled.
        '400':
          description: Failed due to malformed JSON.
        '404':
          description: Failed due to non existing user.
        '401':
          description: Missing or invalid access token provided.
        '500':
         $ref: "#/components/responses/ServiceError"
  /backup:
    get:
      summary: Retrieves all users
      description: |
        Retrieves all users. Only accessible by admin.
      tags:
        - users
      responses:
        '200':
          $ref: "#/components/responses/UsersRes"
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: This endpoint is available only for administrators.
        '500':
          $ref: "#/components/responses/ServiceError"
  /restore:
    post:
      summary: Restore users
      description: |
        Restores all users. Only accessible by admin.
      tags:
        - users
      requestBody:
        $ref: "#/components/requestBodies/RestoreUsersReq"
      responses:
        '201':
          description: Users restored.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: This endpoint is available only for administrators.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
  /health:
    get:
      summary: Retrieves service health check info.
      tags:
        - health
      responses:
        '200':
          $ref: "#/components/responses/HealthRes"
        '500':
          $ref: "#/components/responses/ServiceError"

components:
  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
          format: jwt
          description: Generated access token.
      required:
        - token
    UserReqObj:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "test@example.com"
          description: User's email address will be used as its unique identifier
        password:
          type: string
          format: password
          minimum: 8
          description: Free-form account password used for acquiring auth token(s).
      required:
        - email
        - password
    SelfRegisterReqObj:
      type: object
      properties:
        redirect_path:
          type: string
          description: The path portion of the frontend URL that the user receives in the e-mail verification message.
          example: "/auth/email-verify"
        user:
          type: object
          properties:
            email:
              type: string
              format: email
              example: "test@example.com"
              description: User's email address will be used as its unique identifier
            password:
              type: string
              format: password
              minimum: 8
              description: Free-form account password used for acquiring auth token(s).
    PlatformInviteRegisterReqObj:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "test@example.com"
          description: User's email address will be used as its unique identifier
        password:
          type: string
          format: password
          minimum: 8
          description: Free-form account password used for acquiring auth token(s).
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 18167738-f7a8-4e96-a123-58c3cd14de3a
          description: User unique identifier.
        email:
          type: string
          format: email
          example: "test@example.com"
          description: User's email address will be used as its unique identifier.
        metadata:
          type: object
          description: Arbitrary, object-encoded user's data.
        status:
          type: string
          enum: [enabled, disabled]
          description: User status.
    CreatePlatformInviteSchema:
      type: object
      properties:
        redirect_path:
          type: string
          example: "/register/view-invite"
          description: The path portion of the Platform Invite view URL that the end user receives in the email notification.
        email:
          type: string
          format: email
          description: E-mail of user to invite.
    Users:
      type: object
      properties:
        users:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/User"
      required:
        - users
    SearchUsersReqSchema:
      type: object
      properties:
        status:
          type: string
          description: Filter users by status ("enabled", "disabled", "all").
        email:
          type: string
          description: Email filter. Filtering is performed as a case-insensitive partial match.
        metadata:
          type: object
          description: Metadata filter. Filtering is performed by matching the parameter with metadata on top level. Parameter is JSON.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
          default: 0
          minimum: 0
        limit:
          type: integer
          description: Size of the subset to retrieve.
          default: 10
          maximum: 200
          minimum: 1
        order:
          type: string
          description: Order type.
          default: id
          enum:
            - name
            - id
            - email
            - status
        dir:
          type: string
          description: Order direction.
          default: desc
          enum:
            - asc
            - desc
    UsersPage:
      type: object
      properties:
        users:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/User"
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
      required:
        - users
    UserMetadata:
      type: object
      properties:
        metadata:
          type: object
          description: Arbitrary, object-encoded user's data.
    PlatformInviteSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Invite's unique identifier
        invitee_email:
          type: string
          format: email
          description: E-mail of invited user.
        created_at:
          type: string
          format: date-time
          example: "2024-05-16 16:05:01"
          description: Time at which the Invite was created.
        updated_at:
          type: string
          format: date-time
          example: "2024-05-2316:05:01"
          description: Time at which the Invite expires.
        state:
          type: string
          description: Current state of invite.
          enum: [pending, expired, revoked, accepted]
    PlatformInvitesPageSchema:
      type: object
      properties:
        total:
          type: integer
          description: Total number of Invites.
        offset:
          type: integer
          description: Offset of the page.
        limit:
          type: integer
          description: Limit of the page.
        invites:
          type: array
          items:
            $ref: "#/components/schemas/PlatformInviteSchema"
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message

  parameters:
    Referer:
      name: Referer
      description: Host being sent by browser.
      in: header
      schema:
        type: string
      required: true
    Metadata:
      name: metadata
      description: Metadata filter. Filtering is performed matching the parameter with metadata on top level. Parameter is json.
      in: query
      schema:
        type: string
        minimum: 0
      required: false
    UserId:
      name: userId
      description: Unique user identifier.
      in: path
      schema:
        type: string
        format: uuid
      required: true
    VerificationToken:
      name: token
      description: E-mail verification token.
      in: query
      schema:
        type: string
        format: uuid
      required: true
    Limit:
      name: limit
      description: Size of the subset to retrieve.
      in: query
      schema:
        type: integer
        default: 10
        maximum: 200
        minimum: 1
      required: false
    Offset:
      name: offset
      description: Number of items to skip during retrieval.
      in: query
      schema:
        type: integer
        default: 0
        minimum: 0
      required: false
    Status:
      name: status
      description: User account status.
      in: query
      schema:
        type: string
        default: enabled
      required: false
    InviteId:
      name: inviteId
      description: Invite ID.
      in: path
      schema:
        type: string
        format: uuid
      required: true
  requestBodies:
    UserCreateReq:
      description: JSON-formatted document describing the new user to be registered
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserReqObj'
    SelfRegisterReq:
      description: JSON-formatted document describing the data needed for self-registration.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SelfRegisterReqObj"
    PlatformInviteRegisterReq:
      description: JSON-formatted document describing the data needed for platform-invite registration.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PlatformInviteRegisterReqObj"
    SearchUsersReq:
      description: JSON-formatted document describing user search parameters.
      required: false
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchUsersReqSchema"
    UserUpdateReq:
      description: JSON-formated document describing the metadata of user to be update
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserMetadata"
    RestoreUsersReq:
      description: JSON-formated document describing the users to be restored
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Users"
    RequestPasswordReset:
      description: Initiate password request procedure.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: User email.
    PasswordReset:
      description: Password reset request data, new password and token that is appended on password reset link received in email.
      content:
        application/json:
          schema:
            type: object
            properties:
              password:
                type: string
                format: password
                description: New password.
                minimum: 8
              confirm_password:
                type: string
                format: password
                description: New confirmation password.
                minimum: 8
              token:
                type: string
                format: jwt
                description: Reset token generated and sent in email.
    PasswordChange:
      description: Password change data. User can change its password.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              password:
                type: string
                format: password
                description: New password.
              old_password:
                type: string
                format: password
                description: Old password.
    PlatformInviteReq:
      description: JSON-formatted document describing a request to create a new Platform Invite.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreatePlatformInviteSchema"

  responses:
    UserCreateRes:
      description: Registered new user.
      headers:
        Location:
          content:
            text/plain:
              schema:
                type: string
                format: url
                description: Registered user relative URL.
                example: /users/{userId}
    UsersPageRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UsersPage"
    UserRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UsersRes:
      description: Data retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Users"
    PlatformInviteRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PlatformInviteSchema"
    PlatformInvitesPageRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PlatformInvitesPageSchema"
    ServiceError:
      description: Unexpected server-side error occurred.
    HealthRes:
      description: Service Health Check.
      content:
        application/json:
          schema:
            $ref: "./schemas/HealthInfo.yml"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        * Users access: "Authorization: Bearer <user_token>"

security:
  - bearerAuth: []
