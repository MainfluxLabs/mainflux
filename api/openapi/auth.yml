openapi: 3.0.1
info:
  title: Mainflux authentication service
  description: HTTP API for managing platform API keys.
  version: "1.0.0"
paths:
  /keys:
    post:
      summary: Issue API key
      description: |
        Generates a new API key. Thew new API key will
        be uniquely identified by its ID.
      tags:
        - auth
      requestBody:
        $ref: "#/components/requestBodies/KeyRequest"
      responses:
        '201':
          description: Issued new key.
        '400':
          description: Failed due to malformed JSON.
        '409':
          description: Failed due to using already existing ID.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
  /keys/{id}:
    get:
      summary: Gets API key details.
      description: |
        Gets API key details for the given key.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/ApiKeyId"
      responses:
        '200':
          $ref: "#/components/responses/KeyRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
    delete:
      summary: Revoke API key
      description: |
        Revoke API key identified by the given ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/ApiKeyId"
      responses:
        '204':
          description: Key revoked.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /orgs:
    post:
      summary: Creates new organization.
      description: |
        Creates new organization. The new organization will be uniquely identified by its ID.
      tags:
        - auth
      requestBody:
        $ref: "#/components/requestBodies/OrgReq"
      responses:
        '201':
          description: Organization created.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '409':
          description:  Entity already exist.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    get:
      summary: Retrieves all organizations.
      description: |
        Retrieves all organizations owner by the user.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/Metadata"
      responses:
        '200':
          $ref: "#/components/responses/OrgsPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
    patch:
      summary: Removes organizations
      description: Removes organizations with provided identifiers
      tags:
        - auth
      requestBody:
        $ref: "#/components/requestBodies/RemoveOrgReq"
      responses:
        '204':
          description: Organizations removed.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"      
  /orgs/search:
    post:
      summary: Search and retrieve organizations.
      description: |
        Retrieves a list of organizations with optional name and metadata filtering, and supports pagination (offset, limit) and sorting (order, dir).
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/SearchOrgsReq'
      responses:
        '200':
          $ref: '#/components/responses/OrgsPageRes'
        '400':
          description: Malformed JSON or parameters.
        '401':
          description: Missing or invalid access token.
        '404':
          description: No matching organizations found.
        '500':
          $ref: '#/components/responses/ServiceError'
  /orgs/{orgId}:
    get:
      summary: Retrieves organization details.
      description: |
        Retrieves organization details for the given organization ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
      responses:
        '200':
          $ref: "#/components/responses/OrgRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Organization does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
    put:
      summary: Updates organization details.
      description: |
        Updates organization details for the given organization ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        $ref: "#/components/requestBodies/OrgReq"
      responses:
        '200':
          description: Organization updated.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Organization does not exist.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    delete:
      summary: Remove organization.
      description: |
        Remove organization identified by the given ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
      responses:
        '204':
          description: Organization removed.
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Organization does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
  /orgs/{orgId}/members/{memberId}:
    get:
      summary: Retrieves organization membership details.
      description: |
        Retrieves membership details for the given organization ID and member ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/MemberId"
      responses:
        '200':
          $ref: "#/components/responses/OrgMembershipRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Organization or member does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
  /orgs/{orgId}/memberships:
    post:
      summary: Creates memberships for organization.
      description: |
        Creates new memberships for organization identified by the given ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        $ref: "#/components/requestBodies/OrgMembershipsReq"
      responses:
        '200':
          description: Memberships created for organization.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Failed due to non existing organization.
        '409':
          description: Failed due to using already existing ID.
        '500':
          $ref: "#/components/responses/ServiceError"
    get:
      summary: Retrieves all memberships of organization.
      description: |
        Retrieves all memberships of organization identified by the given ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Metadata"
      responses:
        '200':
          $ref: "#/components/responses/OrgMembershipsRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    patch:
      summary: Removes memberships from organization.
      description: |
        Removes memberships from organization identified by the given ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        $ref: "#/components/requestBodies/RemoveOrgMembershipsReq"
      responses:
        '204':
          description: Memberships removed from organization.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
    put:
      summary: Updates memberships of organization.
      description: |
        Updates members role of organization identified by the given ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        $ref: "#/components/requestBodies/OrgMembershipsReq"
      responses:
        '200':
          description: Membership updated.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Failed due to non existing organization.
        '500':
          $ref: "#/components/responses/ServiceError"
  /orgs/{orgId}/memberships/backup:
    get:
      summary: Retrieves organization membership backup.
      description: |
        Retrieves a backup of all organization memberships. The response is a JSON object containing all related organization memberships. 
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
      responses:
        '200':
          $ref: "#/components/responses/OrgMembershipsBackupRes"
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: Failed to perform authorization over the entity.
        '404':
          description: Failed due to non existing organization or related entities.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
  /orgs/{orgId}/memberships/restore:
    post:
      summary: Restores organization memberships backup.
      description: |
        Restores organization memberships from backup. Backup is a JSON file that contains all organization memberships that will be restored.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        $ref: "#/components/requestBodies/RestoreOrgMembershipsReq"
      responses:
        '201':
          description: Backup restored.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
  /orgs/{orgId}/invites:
    post:
      summary: Creates new organization Invite.
      description: |
        Creates a new Invite on behalf of the currently authenticated User, towards the user identified by the supplied
        e-mail, to join the specified organization with the specified role.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        $ref: "#/components/requestBodies/InviteReq"
      responses:
        '201':
          description: Invite created.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
  /invites/{inviteId}:
    get:
      summary: Retrieve a specific Invite.
      description: |
        Retrieve detailed information about a specific invite denoted by its ID.
      tags:
        - auth
      parameters:
          - $ref: "#/components/parameters/InviteId"
      responses:
        '200':
          $ref: "#/components/responses/InviteRes"
        '404':
          description: Failed due to non existing Invite.
        '500':
          $ref: "#/components/responses/ServiceError"
    delete:
      summary: Revoke a specific Invite.
      description: |
        Revoke a specific pending Invite denoted by its ID. An Invite can only be revoked by its original
        Inviter, i.e. the user who sent it.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/InviteId"
      responses:
        '204':
          description: Invite revoked.
        '404':
          description: Failed due to non existing Invite.
        '500':
          $ref: "#/components/responses/ServiceError"
  /invites/{inviteId}/accept:
    post:
      summary: Accept an Invite.
      description: |
        Accept a specific Invite denoted by its ID. An Invite can only be responded to by the invitee,
        i.e. the user being invited.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/InviteId"
      responses:
        '201':
          description: Invite accepted and invitee added as a member of the organization.
        '404':
          description: Failed due to non existing Invite.
        '500':
          $ref: "#/components/responses/ServiceError"
  /invites/{inviteId}/decline:
    post:
      summary: Decline an Invite.
      description: |
        Decline a specific Invite denoted by its ID. An Invite can only be responded to by the invitee,
        i.e. the user being invited.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/InviteId"
      responses:
        '204':
          description: Invite declined and removed from the database.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Failed due to non existing Invite.
        '500':
          $ref: "#/components/responses/ServiceError"
  /users/{userId}/invites:
    get:
      summary: Retrieve pending Invites sent to specific user.
      description: |
        Retreieve a list of pending Invites send to a specific user, i.e. invitee, denoted by their
        user ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
      responses:
        '200':
          $ref: "#/components/responses/InvitesPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: Failed to perform authorization over the entity.
        '500':
          $ref: "#/components/responses/ServiceError"
  /users/{userId}/invites/sent:
    get:
      summary: Retrieve pending Invites sent by a specific user.
      description: |
        Retreieve a list of pending Invites send by a specific user, i.e. inviter, denoted by their
        user ID.
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
      responses:
        '200':
          $ref: "#/components/responses/InvitesPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: Failed to perform authorization over the entity.
        '500':
          $ref: "#/components/responses/ServiceError"

  /backup:
    get:
      summary: Retrieves backup of orgs service.
      description: |
        Retrieves backup of the orgs service. Backup is a JSON file that contains
        all orgs, org memberships and org groups.
      tags:
        - auth
      responses:
        '200':
          $ref: "#/components/responses/BackupRes"
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /restore:
    post:
      summary: Restores org service from backup.
      description: |
        Restores org service from backup. Backup is a JSON file that contains
        all orgs, org memberships and org groups.
      tags:
        - auth
      requestBody:
        $ref: "#/components/requestBodies/RestoreReq"
      responses:
        '201':
          description: Backup restored.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /health:
    get:
      summary: Retrieves service health check info.
      tags:
        - health
      responses:
        '200':
          $ref: "#/components/responses/HealthRes"
        '500':
          $ref: "#/components/responses/ServiceError"
components:
  schemas:
    Key:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "c5747f2f-2a7c-4fe1-b41a-51a5ae290945"
          description: API key unique identifier
        issuer_id:
          type: string
          format: uuid
          example: "9118de62-c680-46b7-ad0a-21748a52833a"
          description: In ID of the entity that issued the token.
        type:
          type: integer
          example: 0
          description: API key type. Keys of different type are processed differently.
        subject:
          type: string
          format: string
          example: "test@example.com"
          description: User's email or service identifier of API key subject.
        issued_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Time when the key is generated.
        expires_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Time when the Key expires. If this field is missing,
            that means that Key is valid indefinitely.
    SearchOrgsReqSchema:
      type: object
      properties:
        name:
          type: string
          description: Name filter. Filtering is performed as a case-insensitive partial match.
        metadata:
          type: object
          description: Metadata filter. Filtering is performed matching the parameter with metadata on top level. Parameter is json.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
          default: 0
          minimum: 0
        limit:
          type: integer
          description: Size of the subset to retrieve.
          default: 10
          maximum: 200
          minimum: 1
        order:
          type: string
          description: Order type.
          default: id
          enum:
            - name
            - id
        dir:
          type: string
          description: Order direction.
          default: desc
          enum:
            - asc
            - desc
    OrgResSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "c5747f2f-2a7c-4fe1-b41a-51a5ae290945"
          description: Organization unique identifier
        name:
          type: string
          example: "Test"
          description: Organization name.
        owner_id:
          type: string
          format: uuid
          example: "9118de62-c680-46b7-ad0a-21748a52833a"
          description: In ID of the entity that owns the organization.
        description:
          type: string
          example: "Test"
          description: Organization description.
        metadata:
          type: object
          example: {"key": "value"}
          description: Organization metadata.
        created_at:
          type: string
          format: date-time
          example: "2024-05-16 16:05:01"
          description: Time when the organization is created.
        updated_at:
          type: string
          format: date-time
          example: "2024-05-16 16:05:01"
          description: Time when the organization is updated.
    OrgSchema:
      type: object
      properties:
        name:
          type: string
          description: Organization name.
        description:
          type: string
          description: Organization description.
        metadata:
          type: object
          description: Organization metadata.
    OrgsPageSchema:
      type: object
      properties:
        total:
          type: integer
          description: Total number of organizations.
        offset:
          type: integer
          description: Offset of the page.
        limit:
          type: integer
          description: Limit of the page.
        name:
          type: string
        orgs:
          type: array
          items:
            $ref: "#/components/schemas/OrgResSchema"
    OrgMembership:
      type: object
      properties:
        member_id:
          type: string
          format: uuid
        email:
          type: string
          example: "test@example.com"
          description: Organization member email.
        role:
          type: string
          example: "viewer"
          description: Organization member role.
    OrgMembershipPageSchema:
      type: object
      properties:
          limit:
            type: integer
            description: Limit of the page.
          offset:
            type: integer
            description: Offset of the page.
          total:
            type: integer
            description: Total number of members.
          name:
            type: string
          org_memberships:
            type: array
            minItems: 1
            uniqueItems: true
            items:
              $ref: "#/components/schemas/OrgMembership"
    OrgMembershipsSchema:
      type: object
      properties:
        org_memberships:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/OrgMembership"
    OrgMemberIDsSchema:
      type: object
      properties:
        member_ids:
          type: array
          example: ["c5747f2f-2a7c-4fe1-b41a-51a5ae290945"]
          minItems: 1
          uniqueItems: true
          items:
            type: string
            format: uuid
    OrgMembershipsResSchema:
      type: object
      properties:
        member_id:
          type: string
          format: uuid
          description: Unique member identifier generated by the service
        org_id:
          type: string
          format: uuid
          description: Unique organization identifier generated by the service
        role:
          type: string
          description: Member role in the organization
        created_at:
          type: string
          description: Time when the member relation is created.
        updated_at:
          type: string
          description: Time when the member relation is updated.
      required:
        - member_id
        - org_id
        - role
        - created_at
        - updated_at
    GroupResSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "c5747f2f-2a7c-4fe1-b41a-51a5ae290945"
          description: Group unique identifier
        owner_id:
          type: string
          format: uuid
          example: "9118de62-c680-46b7-ad0a-21748a52833a"
          description: In ID of the entity that owns the group.
        name:
          type: string
          example: "test"
          description: Group name.
        description:
          type: string
          example: "description"
          description: Group description.
    OrgGroupsPageSchema:
      type: object
      properties:
        total:
          type: integer
          description: Total number of organizations.
        offset:
          type: integer
          description: Offset of the page.
        limit:
          type: integer
          description: Limit of the page.
        name:
          type: string
        groups:
          type: array
          items:
            $ref: "#/components/schemas/GroupResSchema"
    GroupRelationSchema:
      type: object
      properties:
        group_ids:
          type: string
          format: uuid
          description: Unique group identifier generated by the service
        org_id:
          type: string
          format: uuid
          description: Unique organization identifier generated by the service
        created_at:
          type: string
          description: Time when the group relation is created.
        updated_at:
          type: string
          description: Time when the group relation is updated.
      required:
        - group_ids
        - org_id
        - created_at
        - updated_at
    BackupAndRestoreOrgMembershipsSchema:
      type: array
      minItems: 0
      uniqueItems: true
      items:
        $ref: "#/components/schemas/OrgMembershipsResSchema"

    BackupAndResponseSchema:
      type: object
      properties:
        orgs:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/OrgResSchema"
        org_memberships:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/OrgMembershipsResSchema"
        org_groups:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/GroupRelationSchema"
      required:
        - orgs
        - org_memberships
        - org_groups

    InviteSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Invite's unique identifier
        invitee_id:
          type: string
          format: uuid
          description: The receiving Invitee's unique user identifier
        invitee_email:
          type: string
          format: email
          description: The receiving Invitee'e e-mail address, if applicable
        inviter_id:
          type: string
          format: uuid
          description: The sending Inviter's unique user identifier
        org_id:
          type: string
          format: uuid
          description: The organization's unique identifier
        invitee_role:
          type: string
          description: The invitee's proposed role within the organization.
        created_at:
          type: string
          format: date-time
          example: "2024-05-16 16:05:01"
          description: Time at which the Invite was created.
        updated_at:
          type: string
          format: date-time
          example: "2024-05-2316:05:01"
          description: Time at which the Invite is set to expire.

    InvitesPageSchema:
      type: object
      properties:
        total:
          type: integer
          description: Total number of Invites.
        offset:
          type: integer
          description: Offset of the page.
        limit:
          type: integer
          description: Limit of the page.
        invites:
          type: array
          items:
            $ref: "#/components/schemas/InviteSchema"

    CreateInviteSchema:
      type: object
      properties:
        redirect_path_register:
          type: string
          example: "/auth/register"
          description: The path portion of the account registration URL that the end user receives in the Invite notification.
        redirect_path_invite:
          type: string
          example: "/invite-view"
          description: The path portion of the Invite view URL that the end user receives in the Invite notification.
        org_member:
          type: object
          properties:
              email:
                type: string
                example: "user@test.com"
              role:
                type: string
                example: "editor"
                description: The user's proposed role in the organization.
          description: Essential information needed for creating the Invite.
        
  parameters:
    ApiKeyId:
      name: id
      description: API Key ID.
      in: path
      schema:
        type: string
        format: uuid
      required: true
    OrgId:
      name: orgId
      description: Organization ID.
      in: path
      schema:
        type: string
        format: uuid
      required: true
    InviteId:
      name: inviteId
      description: Invite ID.
      in: path
      schema:
        type: string
        format: uuid
      required: true
    UserId:
      name: userId
      description: User ID.
      in: path
      schema:
        type: string
        format: uuid
      required: true
    GroupId:
      name: groupId
      description: Unique group identifier.
      in: path
      schema:
        type: string
        format: ulid
      required: true
    MemberId:
      name: memberId
      description: Member ID.
      in: path
      schema:
        type: string
        format: uuid
      required: true
    Metadata:
      name: metadata
      description: Metadata filter. Filtering is performed matching the parameter with metadata on top level. Parameter is json.
      in: query
      schema:
        type: string
        minimum: 0
      required: false
    Limit:
      name: limit
      description: Size of the subset to retrieve.
      in: query
      schema:
        type: integer
        default: 10
        minimum: 1
      required: false
    Offset:
      name: offset
      description: Number of items to skip during retrieval.
      in: query
      schema:
        type: integer
        default: 0
        minimum: 0
      required: false

  requestBodies:
    KeyRequest:
      description: JSON-formatted document describing key request.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: integer
                example: 0
                description: API key type. Keys of different type are processed differently.
              duration:
                type: number
                format: integer
                example: 23456
                description: Number of seconds issued token is valid for.
    OrgReq:
      description: JSON-formatted document describing a request to create and update organizations.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrgSchema"
    SearchOrgsReq:
      description: JSON-formatted document describing organization search parameters.
      required: false
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchOrgsReqSchema"
    RemoveOrgReq:
      description: JSON-formatted document describing the identifiers of organizations for deleting.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              thing_ids:
                type: array
                items:
                  type: string
                  format: uuid          
    OrgMembershipsReq:
      description: JSON-formatted document describing a request to create and update memberships.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrgMembershipsSchema"
    RestoreOrgMembershipsReq:
      description: Binary-encoded JSON file describing restore organization memberships request.
      required: true
      content:
        application/octet-stream:
          schema:
            $ref: "#/components/schemas/BackupAndRestoreOrgMembershipsSchema"
    RemoveOrgMembershipsReq:
      description: JSON-formatted document describing a membership removal request.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrgMemberIDsSchema"
    RestoreReq:
      description: JSON-formatted document describing restore request.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BackupAndResponseSchema"
    InviteReq:
      description: JSON-formatted document describing a request to create a new Invite.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateInviteSchema"
  responses:
    ServiceError:
      description: Unexpected server-side error occurred.
    KeyRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Key"
    OrgsPageRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
              $ref: "#/components/schemas/OrgsPageSchema"
    OrgRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrgResSchema"
    OrgMembershipsRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrgMembershipPageSchema"
    OrgMembershipRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrgMembership"
    OrgMembershipsBackupRes:
      description: Successfully retrieved organization membership backup.
      content:
        application/octet-stream:
          schema:
            $ref: "#/components/schemas/BackupAndRestoreOrgMembershipsSchema"
    InvitesPageRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvitesPageSchema"
    InviteRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InviteSchema"
    HealthRes:
      description: Service Health Check.
      content:
        application/json:
          schema:
            $ref: "./schemas/HealthInfo.yml"
    BackupRes:
       description: Backup data retrieved.
       content:
        application/json:
          schema:
            $ref: "#/components/schemas/BackupAndResponseSchema"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        * Users access: "Authorization: Bearer <user_token>"

security:
  - bearerAuth: []
