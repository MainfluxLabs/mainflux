openapi: 3.0.1
info:
  title: Mainflux things service
  description: HTTP API for managing platform things and profiles.
  version: "1.0.0"

paths:
  /groups/{groupId}/things:
    post:
      summary: Adds new things
      description: |
        Adds new things to the list of things owned by user identified using
        the provided access token.
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/GroupId"
      requestBody:
        $ref: "#/components/requestBodies/CreateThingsReq"
      responses:
        '201':
          $ref: "#/components/responses/CreateThingsRes"
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '409':
          description: Entity already exist.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    get:
      summary: Retrieves things by group.
      description: |
        Retrieves an array of things that belong to the group specified by groupID.
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/GroupId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Metadata"
      responses:
        '200':
          $ref: "#/components/responses/ThingsPageRes"
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /things:
    get:
      summary: Retrieves things
      description: |
        Retrieves a list of things. Due to performance concerns, data
        is retrieved in subsets. The API things must ensure that the entire
        dataset is consumed either by making subsequent requests, or by
        increasing the subset size of the initial request.
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Name"
        - $ref: "#/components/parameters/Order"
        - $ref: "#/components/parameters/Direction"
        - $ref: "#/components/parameters/Metadata"
      responses:
        '200':
          $ref: "#/components/responses/ThingsPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
    patch:
      summary: Removes things
      description: Removes things with provided identifiers
      tags:
        - things
      requestBody:
        $ref: "#/components/requestBodies/RemoveThingReq"
      responses:
        '204':
          description: Things removed.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /things/search:
    post:
      summary: Search and retrieves things
      description: |
        Retrieves a list of things with name and metadata filtering.
        Due to performance concerns, data is retrieved in subsets.
        The API things must ensure that the entire
        dataset is consumed either by making subsequent requests, or by
        increasing the subset size of the initial request.
      tags:
        - things
      requestBody:
        $ref: "#/components/requestBodies/SearchThingsReq"
      responses:
        '200':
          $ref: "#/components/responses/ThingsPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: A non-existent entity request.
        '422':
          description: Unprocessable Entity
        '500':
          $ref: "#/components/responses/ServiceError"
  /things/{thingId}:
    get:
      summary: Retrieves thing info
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/ThingId"
      responses:
        '200':
          $ref: "#/components/responses/ThingRes"
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Thing does not exist.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
    put:
      summary: Updates thing info
      description: |
        Update is performed by replacing the current resource data with values
        provided in a request payload. Note that the thing's type and ID
        cannot be changed.
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/ThingId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateThingReq"
      responses:
        '200':
          description: Thing updated.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Thing does not exist.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    delete:
      summary: Removes a thing
      description: |
        Removes a thing.
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/ThingId"
      responses:
        '204':
          description: Thing removed.
        '400':
          description: Failed due to malformed thing's ID.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /things/{thingId}/key:
    patch:
      summary: Updates thing key
      description: |
        Update is performed by replacing current key with a new one.
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/ThingId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateKeyReq"
      responses:
        '200':
          description: Thing key updated.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Thing does not exist.
        '409':
          description: Specified key already exists.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
  /things/{thingId}/groups:
    get:
      summary: Retrieves group by thing.
      description: |
        Retrieves group that thing is member of.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/ThingId"
      responses:
        '200':
          $ref: "#/components/responses/GroupRes"
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /metadata:
    get:
      summary: Retrieves thing metadata
      description: Retrieves metadata about the thing identified by the given key
      tags:
        - things
      security:
        - thingKeyAuth: []
      responses:
        '200':
          $ref: "#/components/responses/MetadataRes"
        '401':
          description: Missing or invalid bearer entity key.
        '404':
          description: Thing does not exist.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
  /orgs/{orgId}/things:
    get:
      summary: Retrieves things by org
      description: |
        Retrieves an array of things that belong to the org identified by id
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Metadata"
      responses:
        '200':
          $ref: "#/components/responses/ThingsPageRes"
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"

  /groups/{groupId}/profiles:
    post:
      summary: Adds new profiles
      description: |
        Adds new profiles to the list of profiles owned by user identified using
        the provided access token.
      tags:
        - profiles
      parameters:
        - $ref: "#/components/parameters/GroupId"
      requestBody:
        $ref: "#/components/requestBodies/CreateProfilesReq"
      responses:
        '201':
          $ref: "#/components/responses/CreateProfilesRes"
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '409':
          description: Entity already exist.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    get:
      summary: List profiles by group.
      description: |
        An array of profiles that belong to the group specified by groupID.
      tags:
        - profiles
      parameters:
        - $ref: "#/components/parameters/GroupId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Metadata"
      responses:
        '200':
          $ref: "#/components/responses/ProfilesPageRes"
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /profiles:
    get:
      summary: Retrieves profiles
      description: |
        Retrieves a list of profiles. Due to performance concerns, data
        is retrieved in subsets. The API things must ensure that the entire
        dataset is consumed either by making subsequent requests, or by
        increasing the subset size of the initial request.
      tags:
        - profiles
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Name"
        - $ref: "#/components/parameters/Order"
        - $ref: "#/components/parameters/Direction"
        - $ref: "#/components/parameters/Metadata"
      responses:
        '200':
          $ref: "#/components/responses/ProfilesPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
    patch:
      summary: Removes profiles
      description: Removes profiles with provided identifiers if they are not assigned to any Thing.
      tags:
        - profiles
      requestBody:
        $ref: "#/components/requestBodies/RemoveProfileReq"
      responses:
        '204':
          description: Profiles removed.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /profiles/{profileId}:
    get:
      summary: Retrieves profile info
      tags:
        - profiles
      parameters:
        - $ref: "#/components/parameters/ProfileId"
      responses:
        '200':
          $ref: "#/components/responses/ProfileRes"
        '400':
          description: Failed due to malformed profile's ID.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Profile does not exist.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
    put:
      summary: Updates profile info
      description: |
        Update is performed by replacing the current resource data with values
        provided in a request payload. Note that the profile's ID will not be
        affected.
      tags:
        - profiles
      parameters:
        - $ref: "#/components/parameters/ProfileId"
      requestBody:
        $ref: "#/components/requestBodies/CreateProfileReq"
      responses:
        '200':
          description: Profile updated.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Profile does not exist.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    delete:
      summary: Removes a profile
      description: |
        Removes a profile. The service will ensure that the subscribed apps and
        things are unsubscribed from the removed profile.
      tags:
        - profiles
      parameters:
        - $ref: "#/components/parameters/ProfileId"
      responses:
        '204':
          description: Profile removed.
        '400':
          description: Failed due to malformed profile's ID.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /profiles/{profileId}/groups:
    get:
      summary: Retrieves group by profile.
      description: |
        Retrieves group where profile is member of.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/ProfileId"
      responses:
        '200':
          $ref: "#/components/responses/GroupRes"
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /things/{thingId}/profiles:
    get:
      summary: Retrieves profile by thing
      description: |
        Retrieves profile assigned to specified thing.
      tags:
        - profiles
      parameters:
        - $ref: "#/components/parameters/ThingId"
      responses:
        '200':
          $ref: "#/components/responses/ProfileRes"
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Thing does not exist.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
  /profiles/{profileId}/things:
    get:
      summary: List things by profile
      description: |
        Retrieves list of things assigned to the specified profile with pagination
        metadata.
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/ProfileId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
      responses:
        '200':
          $ref: "#/components/responses/ThingsPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
  /orgs/{orgId}/profiles:
    get:
      summary: Retrieves profiles by org
      description: |
        Retrieves an array of profiles that belong to the org identified by id
      tags:
        - profiles
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Metadata"
      responses:
        '200':
          $ref: "#/components/responses/ProfilesPageRes"
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"

  /orgs/{orgId}/groups:
    post:
      summary: Creates new groups
      description: |
        Creates new groups that can be used for grouping entities - things, users.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/OrgId"
      requestBody:
        $ref: "#/components/requestBodies/CreateGroupsReq"
      responses:
        '201':
          $ref: "#/components/responses/CreateGroupRes"
        '400':
          description: Failed due to malformed JSON.
        '409':
          description: Entity already exist.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    get:
      summary: Retrieves groups by org
      description: |
        Retrieves list of groups assigned to the specified org.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/OrgId"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Order"
        - $ref: "#/components/parameters/Direction"
        - $ref: "#/components/parameters/Metadata"
      responses:
        '200':
          $ref: "#/components/responses/GroupsPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /groups:
    get:
      summary: Retrieves all groups.
      description: |
        Retrieves list of all groups.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Order"
        - $ref: "#/components/parameters/Direction"
        - $ref: "#/components/parameters/Metadata"
      responses:
        '200':
          $ref: "#/components/responses/GroupsPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
    patch:
      summary: Removes groups
      description: Removes groups with provided identifiers
      tags:
        - groups
      requestBody:
        $ref: "#/components/requestBodies/RemoveGroupReq"
      responses:
        '204':
          description: Groups removed.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /groups/{groupId}:
    get:
      summary: Retrieves group info.
      description: |
        Retrieves group info by id.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      responses:
        '200':
          $ref: "#/components/responses/GroupRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
    put:
      summary: Updates group data.
      description: |
        Updates Name, Description or Metadata of a group.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateGroupReq"
      responses:
        '200':
          description: Group updated.
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
    delete:
      summary: Deletes group.
      description: |
        Deletes group. Group cannot be deleted if has members or if
        any descendant group has members.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      responses:
        '204':
          description: Group removed.
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
  /groups/{groupId}/members:
    post:
      summary: Create roles by group.
      description: |
        Create group roles for the given group and members.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      requestBody:
        $ref: "#/components/requestBodies/GroupRolesReq"
      responses:
        '201':
          description: Group role created.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Failed due to non existing organization or group.
        '500':
          $ref: "#/components/responses/ServiceError"
    get:
      summary: Retrieves roles by group.
      description: |
        Retrieves page of group roles for the given group ID.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      responses:
        '200':
          $ref: "#/components/responses/GroupRolesRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Organization or group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
    put:
      summary: Update roles by group.
      description: |
        Updates group roles identified by group and members.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      requestBody:
        $ref: "#/components/requestBodies/GroupRolesReq"
      responses:
        '200':
          description: Group role updated.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Failed due to non existing organization or group.
        '500':
          $ref: "#/components/responses/ServiceError"
    patch:
      summary: Remove roles by group.
      description: |
        Removes group roles identified by group and member IDs.
      tags:
        - groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      requestBody:
        $ref: "#/components/requestBodies/RemoveGroupRolesReq"
      responses:
        '204':
          description: Group role removed.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Failed due to non existing organization or group.
        '500':
          $ref: "#/components/responses/ServiceError"
  /identify:
    post:
      summary: Validates thing's key and returns it's ID if key is valid.
      description: |
        Validates thing's key and returns it's ID if specified key exists
        and is valid.
      tags:
        - identity
      requestBody:
        $ref: "#/components/requestBodies/IdentityReq"
      responses:
        '200':
          $ref: "#/components/responses/IdentityRes"
        '401':
          description: Thing with specified key doesn't exist.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
  /backup:
    get:
      summary: Retrieves backup of the things service.
      description: |
        Retrieves backup of the things service. Backup is a JSON file that contains
        all groups, things and profiles.
      tags:
        - backup
      responses:
        '200':
          $ref: "#/components/responses/BackupRes"
        '401':
          description: Missing or invalid access token provided.
        '500':
          $ref: "#/components/responses/ServiceError"
  /restore:
    post:
      summary: Restores things service from backup.
      description: |
        Restores service from backup. Backup is a JSON file that contains
        all groups, things and profiles that will be restored.
      tags:
        - backup
      requestBody:
        $ref: "#/components/requestBodies/RestoreReq"
      responses:
        '201':
          description: Backup restored.
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
  /health:
    get:
      summary: Retrieves service health check info.
      tags:
        - health
      responses:
        '200':
          $ref: "#/components/responses/HealthRes"
        '500':
          $ref: "#/components/responses/ServiceError"

components:
  schemas:
    Identity:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Thing unique identifier. This can be either
            provided by the user or left blank. If the user provides a UUID,
            it would be validated. If there is not one provided then
            the service will generate one in UUID format.
    ThingReqSchema:
      type: object
      properties:
        key:
          type: string
          format: uuid
          description: |
            Thing key that is used for thing auth. If there is
            not one provided service will generate one in UUID
            format.
        profile_id:
          type: string
          format: uuid
          description: Profile ID that will be assigned to the Thing
        name:
          type: string
          description: Free-form thing name.
        metadata:
          type: object
          description: Arbitrary, object-encoded thing's data.
    ThingsReqSchema:
      type: object
      properties:
        name:
          type: string
          description: Name filter. Filtering is performed as a case-insensitive partial match.
        metadata:
          type: object
          description: Metadata filter. Filtering is performed matching the parameter with metadata on top level. Parameter is json.
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
          default: 0
          minimum: 0
        limit:
          type: integer
          description: Size of the subset to retrieve.
          default: 10
          maximum: 100
          minimum: 1
        order:
          type: string
          description: Order type.
          default: id
          enum:
            - name
            - id
        dir:
          type: string
          description: Order direction.
          default: desc
          enum:
            - asc
            - desc
    ThingResSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique thing identifier generated by the service.
        name:
          type: string
          example: "Test"
          description: Free-form thing name.
        key:
          type: string
          format: uuid
          description: Auto-generated access key.
        group_id:
          type: string
          format: uuid
          description: The group identifier to which the thing belongs.
        profile_id:
          type: string
          format: uuid
          description: Profile ID assigned to the Thing
        metadata:
          type: object
          example: { "key": "value" }
          description: Arbitrary, object-encoded thing's data.
      required:
        - id
        - key
        - group_id
    ThingsResSchema:
      type: object
      properties:
        things:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ThingResSchema"
      required:
        - things
    ThingsPage:
      type: object
      properties:
        things:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ThingResSchema"
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
      required:
        - things
    MetadataResSchema:
      type: object
      properties:
        metadata:
          type: object
          example: { "key": "value" }
          description: Object-encoded thing's data.
    ProfileReqSchema:
      type: object
      properties:
        name:
          type: string
          description: Free-form profile name.
        config:
          type: object
          description: Object-encoded profile config data.
        metadata:
          type: object
          description: Arbitrary, object-encoded profile's data.
    ProfileResSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique profile identifier generated by the service.
        name:
          type: string
          example: "Test"
          description: Free-form profile name.
        group_id:
          type: string
          format: uuid
          description: The group identifier to which the thing belongs.
        config:
          type: object
          description: Object-encoded profile config data.
          additionalProperties:
            type: string
          example:
            content_type: "application/json"
            webhook_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        metadata:
          type: object
          example: { "key": "value" }
          description: Arbitrary, object-encoded profile's data.
      required:
        - id
        - group_id
    ProfilesResSchema:
      type: object
      properties:
        profiles:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ProfileResSchema"
      required:
        - profiles
    ProfilesPage:
      type: object
      properties:
        profiles:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ProfileResSchema"
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
      required:
        - profiles
    GroupsPage:
      type: object
      properties:
        groups:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/GroupResSchema"
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
        order:
          type: string
          description: Order type.
        direction:
          type: string
          description: Order direction.
      required:
        - groups
        - total
    MembershipPage:
      type: object
      properties:
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
        order:
          type: string
          description: Order type.
        direction:
          type: string
          description: Order direction.
        name:
          type: string
        total:
          type: integer
          description: Total number of items.
        things:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ThingResSchema"
      required:
        - things
    GroupResSchema:
      type: object
      properties:
        id:
          type: string
          format: ulid
          description: Unique group identifier generated by the service.
        org_id:
          type: string
          format: uuid
          description: The org identifier to which the group belongs.
        name:
          type: string
          example: "Test"
          description: Free-form group name.
        description:
          type: string
          description: Group description, free form text.
        metadata:
          type: object
          example: { "key": "value" }
          description: Arbitrary, object-encoded group's data.
        created_at:
          type: string
          format: date-time
          example: "2024-05-16 16:05:01"
          description: Datetime of group creation.
        updated_at:
          type: string
          format: date-time
          example: "2024-05-16 16:05:01"
          description: Datetime of last group updated.
      required:
        - id
        - org_id
        - name
        - description
        - created_at
        - updated_at
    CreateGroupResSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique group identifier generated by the service.
        org_id:
          type: string
          format: uuid
          description: The org identifier to which the group belongs.
        name:
          type: string
          example: "Test"
          description: Free-form group name.
        description:
          type: string
          description: Group description, free form text.
        metadata:
          type: object
          example: { "key": "value" }
          description: Arbitrary, object-encoded group's data.
    GroupSchema:
      type: object
      properties:
        name:
          type: string
          description: |
            Free-form group name. Group name is unique.
        description:
          type: string
          description: Group description, free form text.
        metadata:
          type: object
          description: Arbitrary, object-encoded group's data.
    GroupsReqSchema:
      type: object
      properties:
        groups:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/GroupSchema"
      required:
        - groups
    GroupThingsReqSchema:
      type: object
      properties:
        things:
          type: array
          minItems: 1
          uniqueItems: true
          example: ["6e3d5c1e-8d5a-4b3f-8f3f-4c4b4c4b4c4b"]
          items:
            type: string
            format: uuid | ulid
    GroupProfilesReqSchema:
      type: object
      properties:
        profiles:
          type: array
          minItems: 1
          uniqueItems: true
          example: ["6e3d5c1e-8d5a-4b3f-8f3f-4c4b4c4b4c4b"]
          items:
            type: string
            format: uuid | ulid
    RemoveGroupRolesSchema:
      type: object
      properties:
        member_ids:
          type: array
          minItems: 1
          uniqueItems: true
          example: ["c5747f2f-2a7c-4fe1-b41a-51a5ae290945"]
          items:
            type: string
            format: uuid
    GroupRolesSchema:
      type: object
      properties:
        group_roles:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: Unique member identifier generated by the service
              role:
                type: string
                description: Member role in the group.
              email:
                type: string
                description: Member's email.
            required:
              - id
              - role
    GroupRolesPageSchema:
      type: object
      properties:
        total:
          type: integer
          description: Total number of group members.
        offset:
          type: integer
          description: Offset of the page.
        limit:
          type: integer
          description: Limit of the page.
        group_roles:
          type: array
          items:
            properties:
              id:
                type: string
                format: uuid
                description: Unique member identifier generated by the service
              email:
                type: string
                description: Member email.
              role:
                type: string
                description: Member role in the group.
    BackupAndRestoreSchema:
      type: object
      properties:
        groups:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/GroupResSchema"
        things:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ThingResSchema"
        profiles:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ProfileResSchema"
      required:
        - groups
        - things
        - profiles

  parameters:
    ProfileId:
      name: profileId
      description: Unique profile identifier.
      in: path
      schema:
        type: string
        format: uuid
      required: true
    ThingId:
      name: thingId
      description: Unique thing identifier.
      in: path
      schema:
        type: string
        format: uuid
      required: true
    GroupId:
      name: groupId
      description: Unique group identifier.
      in: path
      schema:
        type: string
        format: ulid
      required: true
    OrgId:
      name: orgId
      description: Unique org identifier.
      in: path
      schema:
        type: string
        format: uuid
      required: true
    Limit:
      name: limit
      description: Size of the subset to retrieve.
      in: query
      schema:
        type: integer
        default: 10
        maximum: 100
        minimum: 1
      required: false
    Offset:
      name: offset
      description: Number of items to skip during retrieval.
      in: query
      schema:
        type: integer
        default: 0
        minimum: 0
      required: false
    Name:
      name: name
      description: Name filter. Filtering is performed as a case-insensitive partial match.
      in: query
      schema:
        type: string
      required: false
    Order:
      name: order
      description: Order type.
      in: query
      schema:
        type: string
        default: id
        enum:
          - name
          - id
      required: false
    Direction:
      name: dir
      description: Order direction.
      in: query
      schema:
        type: string
        default: desc
        enum:
          - asc
          - desc
      required: false
    Metadata:
      name: metadata
      description: Metadata filter. Filtering is performed matching the parameter with metadata on top level. Parameter is json.
      in: query
      required: false
      schema:
        type: object
        additionalProperties: {}

  requestBodies:
    CreateThingsReq:
      description: JSON-formatted document describing the new things.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              things:
                type: array
                items:
                  $ref: "#/components/schemas/ThingReqSchema"
    UpdateThingReq:
      description: Arbitrary, object-encoded thing's data.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Free-form thing name.
              metadata:
                type: object
              profile_id:
                type: string
                format: uuid
    SearchThingsReq:
      description: JSON-formatted document describing search parameters.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ThingsReqSchema"
    RemoveThingReq:
      description: JSON-formatted document describing the identifiers of things for deleting.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              thing_ids:
                type: array
                items:
                  type: string
                  format: uuid
    UpdateKeyReq:
      required: true
      description: JSON containing thing.
      content:
        application/json:
          schema:
            type: object
            properties:
              key:
                type: string
                format: uuid
                description: Thing key that is used for thing auth.
    CreateProfileReq:
      description: JSON-formatted document describing the updated profile.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProfileReqSchema"
    CreateProfilesReq:
      description: JSON-formatted document describing the new profiles.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              profiles:
                type: array
                items:
                  $ref: "#/components/schemas/ProfileReqSchema"
    RemoveProfileReq:
      description: JSON-formatted document describing the identifiers of profiles for deleting.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              profile_ids:
                type: array
                items:
                  type: string
                  format: uuid
    IdentityReq:
      description: JSON-formatted document that contains thing key.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                format: uuid
                description: Thing key that is used for thing auth.
            required:
              - token
    CreateGroupsReq:
      description: JSON-formatted document describing group create request.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupsReqSchema"
    UpdateGroupReq:
      description: JSON-formatted document describing group create request.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupSchema"
    RemoveGroupReq:
      description: JSON-formatted document describing the identifiers of groups for deleting.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              group_ids:
                type: array
                items:
                  type: string
                  format: uuid
    GroupThingsReq:
      description: JSON array of thing IDs.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupThingsReqSchema"
    GroupProfilesReq:
      description: JSON array of profile IDs.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupProfilesReqSchema"
    GroupRolesReq:
      description: JSON-formatted document describing group roles request.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupRolesSchema"
    RemoveGroupRolesReq:
      description: JSON-formatted document describing remove group role request.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RemoveGroupRolesSchema"
    RestoreReq:
      description: JSON-formatted document describing restore request.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BackupAndRestoreSchema"

  responses:
    CreateThingsRes:
      description: Things created.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ThingResSchema"
    ThingRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ThingResSchema"
    ThingsPageRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ThingsPage"
    MetadataRes:
      description: Thing metadata retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MetadataResSchema'
    CreateProfilesRes:
      description: Profiles created.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ProfileResSchema"
    ProfileRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProfileResSchema"
    ProfilesPageRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProfilesPage"
    IdentityRes:
      description: Thing ID returned.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Identity"
    CreateGroupRes:
      description: Group created.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateGroupResSchema"
      headers:
        Location:
          content:
            text/plain:
              schema:
                type: string
                description: Created group's relative URL.
                example: /groups/{groupId}
    GroupRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupResSchema"
    GroupsPageRes:
      description: Group data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupsPage"
    GroupRolesRes:
      description: JSON-formatted document describing group roles page response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupRolesPageSchema"
    BackupRes:
      description: Backup data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BackupAndRestoreSchema"
    ServiceError:
      description: Unexpected server-side error occurred.
      content:
        application/json:
          schema:
            type: string
            format: byte
    HealthRes:
      description: Service Health Check.
      content:
        application/json:
          schema:
            $ref: "./schemas/HealthInfo.yml"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        * Users access: "Authorization: Bearer <user_token>"
    thingKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        * Things access: "Authorization: Thing <thing_key>"

security:
  - bearerAuth: []
